import Taro from "@tarojs/taro";
import { updateUserInfo } from "../services/api";

// ÈªòËÆ§Áî®Êà∑‰ø°ÊÅØ
const DEFAULT_USER_INFO = {
  nickname: "ÂæÆ‰ø°Áî®Êà∑",
  avatar: "",
};

// Â≠òÂÇ®ÈîÆ
const STORAGE_KEYS = {
  NICKNAME: "user_nickname",
  AVATAR: "user_avatar",
  HAS_AUTHORIZED: "user_has_authorized",
};

/**
 * Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÔºà‰ºòÂÖà‰ªéÊú¨Âú∞ÁºìÂ≠òËé∑ÂèñÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôËøîÂõûÈªòËÆ§ÂÄºÔºâ
 */
export const getUserInfo = () => {
  try {
    const hasAuthorized = Taro.getStorageSync(STORAGE_KEYS.HAS_AUTHORIZED);

    if (hasAuthorized) {
      const nickname = Taro.getStorageSync(STORAGE_KEYS.NICKNAME);
      const avatar = Taro.getStorageSync(STORAGE_KEYS.AVATAR);

      return {
        nickname: nickname || DEFAULT_USER_INFO.nickname,
        avatar: avatar || DEFAULT_USER_INFO.avatar,
        hasAuthorized: true,
      };
    }

    return {
      ...DEFAULT_USER_INFO,
      hasAuthorized: false,
    };
  } catch (error) {
    console.error("Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:", error);
    return {
      ...DEFAULT_USER_INFO,
      hasAuthorized: false,
    };
  }
};

/**
 * ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂà∞Êú¨Âú∞ÁºìÂ≠ò
 */
export const saveUserInfo = (nickname, avatar) => {
  try {
    Taro.setStorageSync(STORAGE_KEYS.NICKNAME, nickname);
    Taro.setStorageSync(STORAGE_KEYS.AVATAR, avatar);
    Taro.setStorageSync(STORAGE_KEYS.HAS_AUTHORIZED, true);
    return true;
  } catch (error) {
    console.error("‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:", error);
    return false;
  }
};

/**
 * ÂêåÊ≠•Áî®Êà∑‰ø°ÊÅØÂà∞ÂêéÁ´ØÊï∞ÊçÆÂ∫ì
 * @param {string} nickname - ÊòµÁß∞
 * @param {string} avatar - Â§¥ÂÉèURL
 */
export const syncUserInfoToBackend = async (nickname, avatar) => {
  try {
    // Âä®ÊÄÅÂØºÂÖ•ÈÅøÂÖçÂæ™ÁéØ‰æùËµñ
    const { getOpenId } = await import("./auth");
    const { updateUserInfo } = await import("../services/realApi");

    const openid = getOpenId();
    if (!openid) {
      throw new Error("Êú™ÊâæÂà∞Áî®Êà∑OpenIDÔºåÊó†Ê≥ïÂêåÊ≠•");
    }

    console.log("üîÑ Ê≠£Âú®ÂêåÊ≠•Áî®Êà∑‰ø°ÊÅØÂà∞ÂêéÁ´Ø...", { openid, nickname, avatar });

    // Ë∞ÉÁî®ÂêéÁ´ØAPIÊõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
    await updateUserInfo(openid, nickname, avatar);

    console.log("‚úÖ Áî®Êà∑‰ø°ÊÅØÂ∑≤ÂêåÊ≠•Âà∞ÂêéÁ´ØÊï∞ÊçÆÂ∫ì");
    return true;
  } catch (error) {
    console.error("‚ùå ÂêåÊ≠•Áî®Êà∑‰ø°ÊÅØÂà∞ÂêéÁ´ØÂ§±Ë¥•:", error);
    throw error;
  }
};

/**
 * ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÔºàÂêåÊó∂‰øùÂ≠òÂà∞Êú¨Âú∞ÂíåÂêéÁ´ØÔºâ
 * @param {string} nickname - ÊòµÁß∞
 * @param {string} avatar - Â§¥ÂÉèURL
 */
export const saveAndSyncUserInfo = async (nickname, avatar) => {
  try {
    // 1. ‰øùÂ≠òÂà∞Êú¨Âú∞ÁºìÂ≠ò
    saveUserInfo(nickname, avatar);
    console.log("‚úÖ Áî®Êà∑‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞Êú¨Âú∞ÁºìÂ≠ò");

    // 2. ÂêåÊ≠•Âà∞ÂêéÁ´ØÊï∞ÊçÆÂ∫ì
    await syncUserInfoToBackend(nickname, avatar);

    return { success: true };
  } catch (error) {
    console.error("‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:", error);
    return {
      success: false,
      error: error.message || "‰øùÂ≠òÂ§±Ë¥•",
    };
  }
};

/**
 * Ê∏ÖÈô§Áî®Êà∑‰ø°ÊÅØÁºìÂ≠ò
 */
export const clearUserInfo = () => {
  try {
    Taro.removeStorageSync(STORAGE_KEYS.NICKNAME);
    Taro.removeStorageSync(STORAGE_KEYS.AVATAR);
    Taro.removeStorageSync(STORAGE_KEYS.HAS_AUTHORIZED);
    return true;
  } catch (error) {
    console.error("Ê∏ÖÈô§Áî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:", error);
    return false;
  }
};
